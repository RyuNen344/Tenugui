pluginManager.apply("com.vanniktech.maven.publish")
pluginManager.apply("signing")

def localProperty = new Properties()
def localPropertyFile = layout.settingsDirectory.file("local.properties").asFile
if (localPropertyFile.exists()) {
    localProperty.load(localPropertyFile.newDataInputStream())
}

afterEvaluate {
    mavenPublishing {
        pom {
            inceptionYear = "2025"
            url = "https://github.com/RyuNen344/Tenugui"
            licenses {
                license {
                    name = "Apache-2.0"
                    url = "https://github.com/RyuNen344/Tenugui/blob/main/LICENSE.md"
                    distribution = "repo"
                }
            }
            developers {
                developer {
                    id = "RyuNen344"
                    name = "RyuNen344"
                    email = "s1100633@outlook.com"
                }
            }
            scm {
                url = "https://github.com/RyuNen344/Tenugui"
                connection = "scm:git://github.com/RyuNen344/Tenugui.git"
                developerConnection = "scm:git:ssh://github.com/RyuNen344/Tenugui.git"
            }
        }

        publishToMavenCentral()
    }

    publishing {
        repositories {
            maven {
                name = "Local"
                setUrl(layout.settingsDirectory.dir("releases/maven"))
            }
        }
    }
}

signing {
    def enabled = localProperty.getProperty("signing.enabled")?.toBoolean() ?: System.getenv("SIGNING_ENABLED")?.toBoolean() ?: false
    if (enabled) {
        def keyId = localProperty.getProperty("pgp.key_id") ?: System.getenv("PGP_KEY_ID")
        def secretKey = localProperty.getProperty("pgp.signing_key") ?: System.getenv("PGP_SIGNING_KEY")
        def password = localProperty.getProperty("pgp.signing_password") ?: System.getenv("PGP_SIGNING_PASSWORD")
        useInMemoryPgpKeys(keyId, secretKey, password)
        sign(publishing.publications)
    }
}
